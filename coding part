•	Create a Spring Boot Project:
shell
Copy code
spring init --dependencies=web,data-jpa,h2,lombok,devtools user-service
cd user-service
•	Define the User Entity:
java
Copy code
@Entity
public class User {
    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    private Long id;
    private String name;
    private String email;
    // getters and setters
}
•	Create a User Repository:
java
Copy code
public interface UserRepository extends JpaRepository<User, Long> {
}
•	Create a User Service:
java
Copy code
@Service
public class UserService {
    @Autowired
    private UserRepository userRepository;

    public List<User> getAllUsers() {
        return userRepository.findAll();
    }

    public User getUserById(Long id) {
        return userRepository.findById(id).orElse(null);
    }

    public User saveUser(User user) {
        return userRepository.save(user);
    }
}
•	Create a User Controller:
java
Copy code
@RestController
@RequestMapping("/users")
public class UserController {
    @Autowired
    private UserService userService;

    @GetMapping
    public List<User> getAllUsers() {
        return userService.getAllUsers();
    }

    @GetMapping("/{id}")
    public User getUserById(@PathVariable Long id) {
        return userService.getUserById(id);
    }

    @PostMapping
    public User createUser(@RequestBody User user) {
        return userService.saveUser(user);
    }
}
•	Run the Application:
shell
Copy code
./mvnw spring-boot:run
3. Add Service Discovery with Eureka
•	Add Dependencies to Each Microservice:
xml
Copy code
<dependency>
    <groupId>org.springframework.cloud</groupId>
    <artifactId>spring-cloud-starter-netflix-eureka-client</artifactId>
</dependency>
•	Configure Eureka Client in application.yml:
yaml
Copy code
eureka:
  client:
    service-url:
      defaultZone: http://localhost:8761/eureka/
•	Create Eureka Server:
o	Create a new Spring Boot project with the spring-cloud-starter-netflix-eureka-server dependency.
o	Enable Eureka Server in the main application class:
java
Copy code
@SpringBootApplication
@EnableEurekaServer
public class EurekaServerApplication {
    public static void main(String[] args) {
        SpringApplication.run(EurekaServerApplication.class, args);
    }
}
•	Configure Eureka Server in application.yml:
yaml
Copy code
server:
  port: 8761

eureka:
  client:
    register-with-eureka: false
    fetch-registry: false
4. Implement API Gateway with Spring Cloud Gateway
•	Create a Spring Boot Project for API Gateway:
shell
Copy code
spring init --dependencies=cloud-gateway gateway-service
cd gateway-service
•	Add Dependencies:
xml
Copy code
<dependency>
    <groupId>org.springframework.cloud</groupId>
    <artifactId>spring-cloud-starter-gateway</artifactId>
</dependency>
•	Configure Routes in application.yml:
yaml
Copy code
spring:
  cloud:
    gateway:
      routes:
        - id: user-service
          uri: lb://USER-SERVICE
          predicates:
            - Path=/users/**
•	Enable Eureka Client in API Gateway:
o	Add the spring-cloud-starter-netflix-eureka-client dependency.
o	Configure Eureka client as described in step 3.
5. Add Centralized Configuration with Spring Cloud Config
•	Create a Spring Cloud Config Server:
o	Create a new Spring Boot project with the spring-cloud-config-server dependency.
o	Enable Config Server in the main application class:
java
Copy code
@SpringBootApplication
@EnableConfigServer
public class ConfigServerApplication {
    public static void main(String[] args) {
        SpringApplication.run(ConfigServerApplication.class, args);
    }
}
•	Configure Config Server in application.yml:
yaml
Copy code
server:
  port: 8888

spring:
  cloud:
    config:
      server:
        git:
          uri: https://github.com/your-repo/config-repo
•	Configure Each Microservice to Use Config Server:
o	Add the spring-cloud-starter-config dependency.
o	Configure the bootstrap.yml to point to the Config Server:
yaml
Copy code
spring:
  cloud:
    config:
      uri: http://localhost:8888
6. Containerize Microservices with Docker
•	Create a Dockerfile for Each Microservice:
Dockerfile
Copy code
FROM openjdk:11-jre-slim
VOLUME /tmp
ADD target/user-service.jar user-service.jar
ENTRYPOINT ["java","-jar","/user-service.jar"]
•	Build Docker Images:
shell
Copy code
./mvnw clean package
docker build -t user-service .
•	Run Docker Containers:
shell
Copy code
docker run -d -p 8080:8080 --name user-service user-service
7. Orchestrate with Kubernetes
•	Create Kubernetes Deployment and Service YAML Files:
yaml
Copy code
apiVersion: apps/v1
kind: Deployment
metadata:
  name: user-service
spec:
  replicas: 3
  selector:
    matchLabels:
      app: user-service
  template:
    metadata:
      labels:
        app: user-service
    spec:
      containers:
      - name: user-service
        image: user-service:latest
        ports:
        - containerPort: 8080

---
apiVersion: v1
kind: Service
metadata:
  name: user-service
spec:
  type: LoadBalancer
  selector:
    app: user-service
  ports:
    - port: 8080
      targetPort: 8080
•	Deploy to Kubernetes:
shell
Copy code
kubectl apply -f user-service-deployment.yaml
kubectl apply -f user-service-service.yaml
8. Implement Circuit Breaker with Hystrix
•	Add Dependencies to Each Microservice:
xml
Copy code
<dependency>
    <groupId>org.springframework.cloud</groupId>
    <artifactId>spring-cloud-starter-netflix-hystrix</artifactId>
</dependency>
•	Enable Hystrix in the Application:
java
Copy code
@SpringBootApplication
@EnableCircuitBreaker
public class UserServiceApplication {
    public static void main(String[] args) {
        SpringApplication.run(UserServiceApplication.class, args);
    }
}
•	Define Hystrix Command in the Service Layer:
java
Copy code
@Service
public class UserService {
    @Autowired
    private UserRepository userRepository;

    @HystrixCommand(fallbackMethod = "fallbackGetAllUsers")
    public List<User> getAllUsers() {
        return userRepository.findAll();
    }

    public List<User> fallbackGetAllUsers() {
        return new ArrayList<>();
    }
}
9. Add Distributed Tracing with Zipkin
•	Add Dependencies to Each Microservice:
xml
Copy code
<dependency>
    <groupId>org.springframework.cloud</groupId>
    <artifactId>spring-cloud-starter-zipkin</artifactId>
</dependency>
•	Configure Zipkin in application.yml:
yaml
Copy code
spring:
  zipkin:
    base-url: http://localhost:9411
  sleuth:
    sampler:
      probability: 1.0
•	Run Zipkin Server:
shell
Copy code
docker run -d -p 9411:9411 openzipkin/zipkin
